pip install numpy pandas scikit-learn tensorflow

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.datasets import fetch_california_housing

# Load the California Housing Prices dataset
california_housing = fetch_california_housing()
california_df = pd.DataFrame(data=california_housing.data, columns=california_housing.feature_names)
california_df['PRICE'] = california_housing.target

# Prepare the data
X = california_df.drop('PRICE', axis=1)
y = california_df['PRICE']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)

# Make predictions on the test set
linear_predictions = linear_model.predict(X_test_scaled)

# Evaluate the Linear Regression model
linear_mse = mean_squared_error(y_test, linear_predictions)
print(f"Linear Regression Mean Squared Error: {linear_mse}")

# Neural Network model using TensorFlow
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))

model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, verbose=0)

# Make predictions on the test set using the Neural Network
nn_predictions = model.predict(X_test_scaled).flatten()

# Evaluate the Neural Network model
nn_mse = mean_squared_error(y_test, nn_predictions)
print(f"Neural Network Mean Squared Error: {nn_mse}")
